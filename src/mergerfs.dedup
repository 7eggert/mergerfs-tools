#!/usr/bin/env python3

# Copyright (c) 2016, Antonio SJ Musumeci <trapexit@spawn.link>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import argparse
import ctypes
import errno
import fnmatch
import hashlib
import os
import sys


_libc = ctypes.CDLL("libc.so.6",use_errno=True)
_lgetxattr = _libc.lgetxattr
_lgetxattr.argtypes = [ctypes.c_char_p,ctypes.c_char_p,ctypes.c_void_p,ctypes.c_size_t]
def lgetxattr(path,name):
    if type(path) == str:
        path = path.encode('utf-8','surrogateescape')
    if type(name) == str:
        name = name.encode('utf-8','surrogateescape')
    length = 64
    while True:
        buf = ctypes.create_string_buffer(length)
        res = _lgetxattr(path,name,buf,ctypes.c_size_t(length))
        if res >= 0:
            return buf.raw[0:res]
        else:
            err = ctypes.get_errno()
            if err == errno.ERANGE:
                length *= 2
            elif err == errno.ENODATA:
                return None
            else:
                raise IOError(err,os.strerror(err),path)


def ismergerfs(path):
    try:
        lgetxattr(path,b'user.mergerfs.fullpath')
        return True
    except IOError as e:
        return False


def hash_file(filepath, hasher=None, blocksize=65536):
    if not hasher:
        hasher = hashlib.md5()

    with open(filepath,'rb') as afile:
        buf = afile.read(blocksize)
        while buf:
            hasher.update(buf)
            buf = afile.read(blocksize)

    return hasher.hexdigest()


def sizeof_fmt(num):
    for unit in ['','K','M','G','T','P','E','Z']:
        if abs(num) < 1024.0:
            return "%3.1f%sB" % (num,unit)
        num /= 1024.0
    return "%.1f%sB" % (num,'Y')


def stat_files(paths):
    rv = []
    for path in paths:
        try:
            st = os.stat(path)
            rv.append((path,st))
        except:
            pass

    return rv


def remove(files,execute,verbose):
    for (path,stat) in files:
        try:
            if execute:
                os.remove(path)
                if verbose:
                    print("removed {0}".format(path))
            elif verbose:
                print("would remove {0}".format(path))
        except Exception as e:
            print("%s" % e)


def print_stats(stats):
    for i in range(0,len(stats)):
        print("  %i: %s" % (i+1,stats[i][0]))
        data = ("   - uid: {0:5}; gid: {1:5}; mode: {2:6o}; "
                "size: {3}; mtime: {4}").format(
            stats[i][1].st_uid,
            stats[i][1].st_gid,
            stats[i][1].st_mode,
            sizeof_fmt(stats[i][1].st_size),
            stats[i][1].st_mtime)
        print(data)


def total_size(stats):
    total = 0
    for (name,stat) in stats:
        total = total + stat.st_size
    return total


def manual_dedup(stats):
    done = False
    while not done:
        value = input("Which to keep? ('s' to skip):")

        if value.lower() == 's':
            stats.clear()
            done = True
            continue

        try:
            value = int(value) - 1
            if value < 0 or value >= len(stats):
                raise ValueError
            stats.remove(stats[value])
            done = True
        except NameError:
            print("Input error: enter a value [1-{0}] or skip by entering 's'".format(len(stats)))
        except ValueError:
            print("Input error: enter a value [1-{0}] or skip by entering 's'".format(len(stats)))


def mtime_all(stats):
    mtime = stats[0][1].st_mtime
    return all(x[1].st_mtime == mtime for x in stats)


def size_all(stats):
    size = stats[0][1].st_size
    return all(x[1].st_size == size for x in stats)


def md5sums_all(paths):
    hashval = hash_file(paths[0])
    return all(hash_file(x) == hashval for x in paths[1:])


def newest_dedup(stats):
    if mtime_all(stats):
        del stats[:]
        return

    stats.sort(key=lambda stat: stat[1].st_mtime)
    newest = stats[-1]
    stats.remove(newest)

def newest_any_dedup(stats):
    stats.sort(key=lambda stat: stat[1].st_mtime)
    newest = stats[-1]
    stats.remove(newest)


def oldest_dedup(stats):
    if mtime_all(stats):
        del stats[:]
        return

    stats.sort(key=lambda stat: -stat[1].st_mtime)
    oldest = stats[-1]
    stats.remove(oldest)

def oldest_any_dedup(stats):
    stats.sort(key=lambda stat: -stat[1].st_mtime)
    oldest = stats[-1]
    stats.remove(oldest)


def largest_dedup(stats):
    if size_all(stats):
        del stats[:]
        return

    stats.sort(key=lambda stat: stat[1].st_size)
    largest = stats[-1]
    stats.remove(largest)

def largest_any_dedup(stats):
    stats.sort(key=lambda stat: stat[1].st_size)
    largest = stats[-1]
    stats.remove(largest)


def sort_space_free(stat):
    st = os.statvfs(stat[0])
    return st.f_frsize * st.f_bfree


def drive_with_most_space_dedup(stats):
    stats.sort(key=sort_space_free)
    largest = stats[-1]
    stats.remove(largest)


def getdedupfun(name):
    if name == 'manual':
        return manual_dedup
    elif name == 'newest':
        return newest_dedup
    elif name == 'newest-any':
        return newest_any_dedup
    elif name == 'oldest':
        return oldest_dedup
    elif name == 'oldest-any':
        return oldest_any_dedup
    elif name == 'largest':
        return largest_dedup
    elif name == 'largest-any':
        return largest_dedup
    elif name == 'mostfreespace':
        return drive_with_most_space_dedup


def getxattr(path,key):
    try:
        attr = lgetxattr(path,key)
        if attr:
            return attr.decode('utf-8')
        return ''
    except IOError as e:
        if e.errno == errno.ENODATA:
            return ''
        raise
    except UnicodeDecodeError as e:
        print(e)
        print(attr)
    return ''


def match(filename,matches):
    for match in matches:
        if fnmatch.fnmatch(filename,match):
            return True
    return False


def dedup(fullpath,verbose,ignore,execute,dedupfun):
    paths = getxattr(fullpath,b'user.mergerfs.allpaths').split('\0')
    if len(paths) <= 1:
        return 0

    stats = stat_files(paths)
    if (((ignore == 'same-size')      and     size_all(stats))    or
        ((ignore == 'different-size') and not size_all(stats))    or
        ((ignore == 'same-hash')      and     md5sums_all(paths)) or
        ((ignore == 'different-hash') and not md5sums_all(paths))):
        if verbose:
            print('ignored:',fullpath)
        return 0

    if verbose:
        print(fullpath)
    if verbose >= 2:
        print_stats(stats)

    try:
        dedupfun(stats)
        if not stats and verbose:
            print('skipped: ',fullpath)
        else:
            remove(stats,execute,verbose)

        return total_size(stats)

    except Exception as e:
        print(e)

    return 0


def buildargparser():
    parser = argparse.ArgumentParser(description='dedup files across branches in a mergerfs pool')
    parser.add_argument('dir',
                        type=str,
                        help='starting directory')
    parser.add_argument('-v','--verbose',
                        action='count',
                        default=0,
                        help='once to print duped files, twice for file info')
    parser.add_argument('-i','--ignore',
                        choices=['same-size','different-size','same-hash','different-hash'],
                        help='ignore files if...')
    parser.add_argument('-d','--dedup',
                        choices=['manual','newest','newest-any','oldest','oldest-any','largest','largest-any','mostfreespace'],
                        default='newest',
                        help='what file to **keep**')
    parser.add_argument('-e','--execute',
                        action='store_true',
                        help='without this it will dryrun')
    parser.add_argument('-I','--include',
                        type=str,
                        action='append',
                        default=[],
                        help='fnmatch compatible filter (can use multiple times')
    parser.add_argument('-E','--exclude',
                        type=str,
                        action='append',
                        default=[],
                        help='fnmatch compatible filter (can use multiple times')
    return parser


def main():
    parser = buildargparser()
    args = parser.parse_args()

    dedupfun = getdedupfun(args.dedup)
    if args.dedup == 'manual':
        args.verbose = 2

    args.dir = os.path.realpath(args.dir)
    if not ismergerfs(args.dir):
        print("%s is not a mergerfs directory" % args.dir)
        sys.exit(1)

    total_size = 0
    try:
        verbose  = args.verbose
        ignore   = args.ignore
        execute  = args.execute
        includes = ['*'] if not args.include else args.include
        excludes = args.exclude
        for (dirname,dirnames,filenames) in os.walk(args.dir):
            for filename in filenames:
                if match(filename,excludes):
                    continue
                if not match(filename,includes):
                    continue
                fullpath = os.path.join(dirname,filename)
                total_size += dedup(fullpath,verbose,ignore,execute,dedupfun)
    except KeyboardInterrupt:
        print("exiting: CTRL-C pressed")
    except IOError as e:
        if e.errno == errno.EPIPE:
            pass

    print("Total savings:",sizeof_fmt(total_size))

    sys.exit(0)


if __name__ == "__main__":
    main()
