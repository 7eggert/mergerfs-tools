#!/usr/bin/env python3

# Copyright (c) 2016, Antonio SJ Musumeci <trapexit@spawn.link>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import argparse
import errno
import os
import sys


def ismergerfs(path):
    try:
        os.getxattr(path,"user.mergerfs.fullpath")
        return True
    except IOError as e:
        return False


def sizeof_fmt(num):
    for unit in ['','K','M','G','T','P','E','Z']:
        if abs(num) < 1024.0:
            return "%3.1f%sB" % (num,unit)
        num /= 1024.0
    return "%.1f%sB" % (num,'Y')


def stat_files(paths):
    rv = []
    for path in paths:
        try:
            st = os.stat(path)
            rv.append((path,st))
        except:
            pass

    return rv


def remove(files):
    for (path,stat) in files:
        try:
            os.remove(path)
            print("removed {0}".format(path))
        except Exception as e:
            print("%s" % e)


def size_equal(stats):
    base = stats[0]
    for stat in stats:
        if stat[1].st_size != base[1].st_size:
            return False
    return True


def print_stats(stats):
    for i in range(0,len(stats)):
        print("  %i: %s" % (i+1,stats[i][0]))
        data = ("   - uid: {0:5}; gid: {1:5}; mode: {2:6o}; "
                "size: {3}; mtime: {4}").format(
            stats[i][1].st_uid,
            stats[i][1].st_gid,
            stats[i][1].st_mode,
            sizeof_fmt(stats[i][1].st_size),
            stats[i][1].st_mtime)
        print(data)


def total_size(stats):
    total = 0
    for (name,stat) in stats:
        total = total + stat.st_size
    return total


def noop_dedup(stats):
    stats.pop()


def manual_dedup(stats):
    done = False
    while not done:
        try:
            value = int(input('Which is keep?: ')) - 1
            if value < 0 or value >= len(stats):
                continue
            stats.remove(stats[value])
            done = True
        except NameError:
            print("Input error: enter a value [1,{0}]".format(len(stats)))
        except ValueError:
            print("Input error: enter a value [1,{0}]".format(len(stats)))


def newest_dedup(stats):
    stats.sort(key=lambda stat: stat[1].st_mtime)
    newest = stats[-1]
    stats.remove(newest)


def largest_dedup(stats):
    stats.sort(key=lambda stat: stat[1].st_size)
    largest = stats[-1]
    stats.remove(largest)


def sort_space_free(stat):
    st = os.statvfs(stat[0])
    return st.f_frsize * st.f_bfree


def drive_with_most_space_dedup(stats):
    stats.sort(key=sort_space_free)
    largest = stats[-1]
    stats.remove(largest)


def getdedupfun(name):
    if name == 'manual':
        return manual_dedup
    elif name == 'newest':
        return newest_dedup
    elif name == 'largest':
        return largest_dedup
    elif name == 'mostfreespace':
        return drive_with_most_space_dedup
    return noop_dedup


def getxattr(path,key):
    try:
        attr = os.getxattr(path,key)
        return attr.decode('utf8')
    except IOError as e:
        if e.errno == errno.ENODATA:
            return ''
        raise
    except UnicodeDecodeError as e:
        print(e)
        print(attr)
    return ''


def dedup(fullpath,verbose,ignoresize,execute,dedupfun):
    paths = getxattr(fullpath,"user.mergerfs.allpaths").split('\0')
    if len(paths) <= 1:
        return 0

    stats = stat_files(paths)
    if (ignoresize and size_equal(stats)):
        return 0

    if verbose:
        print("%s" % fullpath)
    if verbose >= 2:
        print_stats(stats)

    try:
        dedupfun(stats)
        if execute:
            remove(stats)

        return total_size(stats)
    except Exception as e:
        print(e)

    return 0


def buildargparser():
    parser = argparse.ArgumentParser(description='dedup files on a mergerfs mount')
    parser.add_argument('dir',
                        type=str,
                        help='starting directory')
    parser.add_argument('-v','--verbose',
                        action='count',
                        default=0,
                        help='once for duped files, twice for info')
    parser.add_argument('-i','--ignoresize',
                        action='store_true',
                        help='ignore files of the same size')
    parser.add_argument('-d','--dedup',
                        choices=['manual','newest','largest','mostfreespace'],
                        help='dedup policy')
    parser.add_argument('-e','--execute',
                        action='store_true',
                        help='without this it will dryrun')
    return parser


def main():
    parser = buildargparser()
    args = parser.parse_args()

    if args.dedup:
        args.verbose = 2

    dedupfun = getdedupfun(args.dedup)

    args.dir = os.path.realpath(args.dir)
    if not ismergerfs(args.dir):
        print("%s is not a mergerfs directory" % args.dir)
        sys.exit(1)

    total_size = 0
    try:
        verbose = args.verbose
        ignoresize = args.ignoresize
        execute = args.execute
        for (dirname,dirnames,filenames) in os.walk(args.dir):
            fulldirpath = os.path.join(args.dir,dirname)
            for filename in filenames:
                fullpath = os.path.join(fulldirpath,filename)
                total_size = total_size + \
                             dedup(fullpath,verbose,ignoresize,execute,dedupfun)
    except KeyboardInterrupt:
        pass
    except IOError as e:
        if e.errno == errno.EPIPE:
            pass

    print("Total savings:",sizeof_fmt(total_size))

    sys.exit(0)


if __name__ == "__main__":
    main()
